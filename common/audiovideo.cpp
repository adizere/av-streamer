#include "audiovideo.h"


// Do any needed initialization here.
AVManager::AVManager () : filename (NULL), format_ctx (NULL), codec_ctx (NULL),
    codec (NULL), frame (NULL)
{
    // Register formats and codecs.
    av_register_all ();
}

bool AVManager::open_file (char *filename)
{
    if (!filename || strlen (filename) < 3) {
        fprintf (stderr, "Error: Cannot open media file (invalid file name).\n");
        return false;
    }
    
    this->filename = malloc (strlen (filename) + 1);
    strcpy (this->filename, filename);
    
    if (av_open_input_file (&format_ctx, this->filename, NULL, 0, NULL) !=0) {
        fprintf (stderr, "Error: Cannot open media file.\n");
        free (this->filename);
        this->filename = NULL;
        return false;
    }
    
    return true;
}

bool AVManager::init_grabbing ()
{
    int i = 0;
    
    if (this->filename == NULL || this->format_ctx == NULL) {
        fprintf (stderr, "Error: Invalid media context.\n");
        return false;
    }
    
    // Retrieve stream information.
    if(av_find_stream_info (this->format_ctx) < 0) {
        fprintf (stderr, "Error: Could not find stream information.\n");
        return false;
    }
    
    // Dump information about file onto standard error.
    dump_format (format_ctx, 0, this->filename, 0);
    
    // Find the first video stream
    video_stream = -1;
    for (i=0; i < format_ctx->nb_streams; i++)
        if (format_ctx->streams[i]->codec->codec_type == CODEC_TYPE_VIDEO) {
        video_stream = i;
        break;
    }
    if (video_stream == -1) {
        fprintf (stderr, "Error: No video stream was found.\n");
        return false;
    }
    
    // Get a pointer to the codec context for the video stream.
    this->codec_ctx = format_ctx->streams[video_stream]->codec;
    
    // Find the decoder for the video stream
    this->codec = avcodec_find_decoder(codec_ctx->codec_id);
    if(this->codec == NULL) {
        fprintf (stderr, "Error: Unsupported codec.\n");
        return false;
    }
    
    // Open codec.
    if (avcodec_open (codec_ctx, codec) < 0) {
        fprintf (stderr, "Error: Could not open codec.\n");
        return false;
    }
    
    // Hack to correct wrong frame rates that seem to be generated by some codecs.
    if(codec_ctx->time_base.num>1000 && codec_ctx->time_base.den == 1)
        codec_ctx->time_base.den=1000;

    // more to come...
}

void AVManager::close_file ()
{
    free (this->filename);
    this->filename = NULL;
}

AVManager::~AVManager ()
{
    /* End of story deallocations. */
}